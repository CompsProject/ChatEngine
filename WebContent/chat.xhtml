<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
<head>
    <title>Chat (Beta)</title>
    <style type="text/css"><![CDATA[
    	body {
    	 	background-image: url("portalWall.png");
  			background-repeat: repeat;
  			background-size: 1530px 1000px;
  			background-position: 0px 0px;
  		}
    	
        input#chat {
            width: 410px
        }

        #console-container {
            /*width: 500px;*/
            width: 80%;
            background-color: white;
            font-size:large;
        }

        #console {
            border: 1px solid #CCCCCC;
            border-right-color: #999999;
            border-bottom-color: #999999;
            height: 400px;
            overflow-y: scroll;
            padding: 5px;
            width: 100%;
        }

        #console p {
            padding: 0;
            margin: 0;
            /* Testing some chat room changes
            padding-top: 1px;
            border-bottom-width: 1px;
            border-bottom-style: solid;
            border-bottom-color: black;
            */
        }
        
        #console p br {
        	clear: both;
        }
        
        #console p div {
        	/*This is the timestamp */
        	color: black;
        	float: right;
        	display: inline-block; 
        	font-size:13px;
        }
        
        # h1 {
        	font-family: "serif";
        	font-weight: bold;
        }
        
         div p.username {
        	font-weight: bold;
        	color: black;
        	//background-color:red; 
        	border-style: outset;
        }
        
        .material-icons.md { font-size: 16px; }
        
        .material-icons.md.pink { color: pink }
        
        .material-icons.md.emo { color:black  }
    ]]></style>
    
    <script src="utility.js" type="text/javascript"></script>
    <script type="application/javascript"><![CDATA[
        "use strict";

        console.log("Not this kind of Console.log");
        
        //Shamelessly stolen from StackOverflow
        //http://stackoverflow.com/questions/1267283/how-can-i-create-a-zerofilled-value-using-javascript/1268377#1268377
        Number.prototype.pad = function(numZeros) {
     		//var n = Math.abs(num);
    		var zeros = Math.max(0, numZeros - Math.floor(this).toString().length );
    		var zeroString = Math.pow(10,zeros).toString().substr(1);

    		return zeroString+this;
    	}
    	
    	
    
        var Chat = {};
        util_permIDCheck();
        
        var clientID = window.name;
        
        Chat.socket = null;
        
        var host = '';
        var chatAlertPast = false; //highlight past chat messages
        var scrollToBot = true; //user scrolling up
        
        //emoticon constants
        //All the strings need to be escaped, so there will be weird formatting
        //Will put a commented version of both on the right
        //The Unicode emoticon also needs to be escaped
        var delmt = '\\';
        var EMO_N_ICON = {
        	'&#x1F601;' : ':B',					// :B teeth
        	'&#x1F604;' : ':D',     			//:D 😁 (looks like they dont work in Eclipse rip
        	'&#x1F606;' : 'XD',					// XD
        	'&#x1F631;' : 'D:',					// D: 
        					
        	'&#x1F60A;' : ':\)',				// :)
        	'&#x1F629;' : ':\(', 				// :(
        	'&#x1F610;' : ':\|',				// :|
        	
        	'&#x1F612;' : ':\/',				// :/ Bound to the same key so gotta change
        	'&#x1F60F;' : ':\\',				// :\
        	'&#x1F609;' : ';\/',				// ;/
        	'&#x1F625;' : ';\\',				// ;\
        	
        	'&#x1F623;' : '>.<',				// >.< 
        	'&#x1F60B;' : ':P', 				// :P
        	'&#x1F61D;' : 'XP', 				// XP
        	'&#x1F61C;' : ';P', 				// ;P
        	
        	'&#x1F62D;' : 'T^T', 				// T^T
        	'&#x1F622;' : 'T.T', 				// T.T
        	'&#x1F602;' : 'TwT', 				// TwT
        	
        	'&#x1F60D;' : '\(&lt;3',			// (<3
        	'&#x1F60E;' : 'B\)',				// B) cool dude
        	'&#x1F636;' : ':x',					// :x 
        	
        	//'&#x1F632;' : ':O',					// :O dunno what to use here
        	'&#x1F632;' : ':o',					// :o
        	//'&#x1F620;' : '>:O', 				// >:O
        	'&#x1F620;' : '>:o', 				// >:o
        	'&#x1F635;' : '@.@',				// @.@
        	'&#x1F62A;' : 'zzz', 				// zzz 
        	
        	'&#x2764;' : '&lt;3', 				// <3
        	'&#x26FA;' : '^^',					// ^^
        	
        	
        };
        
        //add padding to emoticons to prevent invalid strings from being caught 
        for (var emoUni in EMO_N_ICON) {
			//grab the emoticon and put into this format \s(:P)\b 
			if (!EMO_N_ICON.hasOwnProperty(emoUni)) continue;
			
			var emoStr = EMO_N_ICON[emoUni];
			//Convert into string literal into regex parsable string
			emoStr = emoStr.replace(/(\()|(\))|(\|)|(\/)|(\\)|(\^)|(\>)|(\<)/g, '\\$&'  );
				
			/*
			 * Ok so the thing is, for emoticons with letters like :P, I can use \b to test
			 * for a word boundary behind the P; which can test if there are more letters AND
			 * if it ends the string. For non letter emoticons I cant do this.
			 * So now Im generating regex, 2 for letter emoticons and 4 for others
			 * cause Im going over the full chat paragraph, > & < are start & end
			 * letters are ^EMO\b or \sEMO\b (or is |)
			 * non letters are ^EMO$ or \sEMO(?=\s) or \sEMO$ or ^EMO\s
			*/
			if (emoStr.search(/\w$/)!=-1) //if ENDS a word character- B, D, etc
				emoStr = '^\('+emoStr+'\)\\b|\\s('+emoStr+')\\b'; //letter regex
			else 
				emoStr = '^\('+emoStr+'\)(?=\\s)|\\s\('+emoStr+'\)\(?=\\s\)|\\s\('+emoStr+'\)$|^\('+emoStr+'\)$';
			
			var regexTest = new RegExp(emoStr, 'gm');
			//window.console.log(regexTest);
			EMO_N_ICON[emoUni] = regexTest; //convert into regex
        }
       	
        //var TYPING_BGC = '#ebf2f9';
        var TYPING_BGC = 'Lavender';
        //var USER_BGC = 'SeaShell';
        var USER_BGC = 'LavenderBlush';
        var CHAT_HISTORY_BGC = 'LightGoldenRodYellow';
        var CHAT_HISTORY_DBGC = 'Beige';

        Chat.connect = (function(host) {
            if ('WebSocket' in window) {
                Chat.socket = new WebSocket(host);                
            } else if ('MozWebSocket' in window) {
                Chat.socket = new MozWebSocket(host);                
            } else {
                Console.log('Error: WebSocket is not supported by this browser.');
                return;
            }

            Chat.socket.onopen = function () {
                Console.log('Info: WebSocket connection opened.');                
                //create onkeyup listener
                document.getElementById('chat').onkeyup = function(event) {
                    //send every keypress to server for broadcast to all users
                    Chat.sendMessage(event);
                };
                
                document.getElementById('console').onscroll = function(event) {
                	//if scrolled up, freeze the scroll bar
                	var consoleC = document.getElementById('console');
                	var scrollCoef = consoleC.scrollTopMax - consoleC.scrollTop;
                	//window.console.log(scrollCoef);
                	scrollToBot = !(scrollCoef > 100); //average p is about 22px
                }
                
                //broadcast to group that user has joined
                var xml = '<message type="joinChat" senderID="'+clientID+'" ></message>';
                Chat.socket.send(xml);
            };

            Chat.socket.onclose = function () {
                document.getElementById('chat').onkeydown = null;
                Console.log('Info: WebSocket closed... host: '+host);
                //sessionStorage.clear(); //? Did we use sessionStorage?
            };

			Chat.socket.onmessage = function (message) {
				//message arrives in xml, parse data into xml format and get attributes
				//sort by message type
				//Typing- user still typing, save reference
				//Chat - user finished typing
				//Alert - Info from server
				
				var xml = message.data;
                var parser = new DOMParser();
                var xmlDoc = parser.parseFromString(xml,"text/xml");
                var messageNode = xmlDoc.getElementsByTagName('message')[0];
                var messageType = messageNode.getAttribute('type');
                
                //Capture non chat related messages here
                if (messageType == 'redirect'){
                	alert("It seems you refreshed the chat page. \n"
                		+ "Unfortunately, the server doesn't like that and you'll have \n"
                		+ "to login again. Sorry.");
                	util_redirect(messageNode);
                	return;
                } else if (messageType == 'noPermID'){
                	util_noPermID();
                	return;
                } else if (messageType == 'checkGroups'){
                	//ignore but capture this
                	return;
                } else if (messageType == 'lGroupMembers'){
                	showUsers(messageNode);
                	return;
                }
                
                //if message is empty then clear the user's input from screen.
                //this makes sure that if 'backspace' causes all characters to be removed then the username will vanish
                //Note: Users 'typing' messages are not processed
                
                var textNode; //this thing is the cause of so many issues
                var innerText = '';
                if (xmlDoc.getElementsByTagName('text')!==undefined) { //error handling for textNode
                	textNode = xmlDoc.getElementsByTagName('text')[0];
                	if (textNode.childNodes[0]!==undefined) {
                		//innerText = textNode.childNodes[0].nodeValue;
                		innerText = textNode.textContent;
                		
                		
        				//Properly REparse & out of text otherwise XML Parser WILL CRASH
        				innerText = innerText.replace(/&/gm, '&amp;');
        				innerText = innerText.replace(/</gm, '&lt;');
                	}
                }      
       			
                var senderColor = messageNode.getAttribute('senderColor');
                var senderID = messageNode.getAttribute('senderID');
                var userLabel = messageNode.getAttribute('senderName')+": ";
                userLabel = "<b>"+userLabel+"</b>";
                
                //Parse a date string and then pull time string for that (sorry no AM/PM)
                var serverTS = messageNode.getAttribute('timestamp');
                var timestamp = serverTS.match(/_(\S+)/)[1];
                timestamp = '<div>'+timestamp+'</div>';
                
                //var serverTS = new Date();
                //serverTS.setTime(messageNode.getAttribute('timestamp'));
                //var timestamp = serverTS.getHours().pad(2)+":"+serverTS.getMinutes().pad(2)+":"
                //	+serverTS.getSeconds().pad(2)+"."+serverTS.getMilliseconds().pad(3);
                
                var console = document.getElementById('console'); //get console
                var newline = document.createElement('br'); //get break tag
                var paragraph = document.getElementById(senderID); //get para if already created
                
                var chatText = userLabel + innerText + timestamp;
                
                 
                 if (messageType == 'typing'){ //Sender is still typing
                 	if (clientID != senderID){
                 		//Do nothing if client recieved its own info since its already in the chatbox
                 		if (paragraph==null) {
                 			//quit if innerText is ""
                 			if (innerText=="") return;
                 			//need to create <p> element to display text in console
                 			paragraph = document.createElement('p'); //get paragraph tag
                 			
                 			paragraph.style.wordWrap = 'break-word';
                 			paragraph.innerHTML = chatText;
                 			paragraph.id = senderID; //label paragraph after the userID
                 			paragraph.style.color = senderColor;
                 			paragraph.style.backgroundColor = TYPING_BGC;
                 			console.appendChild(paragraph); //add to console
                 		} else if (textNode != undefined && textNode.childNodes[0] === undefined){ //No text in 'typing' message
                 			paragraph.innerHTML = '';
                 			//remove paragraph from console
                 			console.removeChild(paragraph);
                 			paragraph.id = '';
                 		} else {
                 			// <p> element already exists to add to that value
                 			paragraph.innerHTML = chatText;
                 			//place paragraph at the bottom
                 			if(paragraph.nextElementSibling!=null && paragraph.nextElementSibling.id == "") {
                 				console.removeChild(paragraph);
                 				console.appendChild(paragraph);
                 			}
                 		}
                 	} //close !ID
                 } else if (messageType == 'chat') {
                 	//Complete message has been logged - applies to all group members
                 	//no exceptions like on typing
                 	
                 	//do some fancy emoticon replacement
                 		for (var emoUni in EMO_N_ICON) {
                 			var emoReg = EMO_N_ICON[emoUni];
                 			if(innerText.search(emoReg)!=-1) {
                 				//window.console.log(innerText +" "+emoReg.toString());
                 				innerText = innerText.replace(emoReg, ' '+emoUni);
                 				chatText = userLabel + innerText + timestamp;
                 			}
                 		}
                 		
                 	if (paragraph == null) {
                 		//means that the user is the broadcaster, so new <p> for chat
                 		paragraph = document.createElement('p');
                 		paragraph.style.wordWrap = 'break-word';
                 		paragraph.style.color = senderColor;
                 		paragraph.style.backgroundColor = USER_BGC;
                 		
                 		paragraph.innerHTML = chatText;
                 		
                 		//If chat history object, change BG
                 		if (messageNode.getAttribute("chatHistory")!=undefined) {
                 			paragraph.style.backgroundColor = CHAT_HISTORY_BGC;
                 		}
                 		
                 		console.appendChild(paragraph);
                 		paragraph.appendChild(newline);
                 	} else {
                 		//senderID != clientID so <p> element already exists
                 		
                 		paragraph.innerHTML = chatText;
                 		paragraph.id = ''; //remove reference by senderID
                 		paragraph.style.backgroundColor = 'White';
                 		paragraph.appendChild(newline);
                 	}
                 } else if (messageType == 'alert') {
                 	//server message from no user in particular; using console.log
                 	//For join/leave group, do some fancy formatting on username
                 	if (messageNode.getAttribute("chatHistory")!=undefined) chatAlertPast = true;
                 	var usernameString = messageNode.getAttribute('senderName');
                 	innerText = innerText.replace(usernameString, '<span style="color: '+senderColor+'; font-weight: bold;" >'+usernameString+'</span>');
                 	Console.log(innerText+timestamp);
                 } else {
                 	alert('invalid message from server: \n'+xml);
                 }
                 
                 //Scroll to bottom on console if user not scrolled up
                 if (scrollToBot)
                 	console.scrollTop = console.scrollHeight;
                 
             };
                 			
			
            
        }); //end of Socket.connect
		
        
        Chat.sendMessage = function (event) {
        	var keycode = event.keyCode;
        	var message = document.getElementById('chat').value;
        	var chatType = 'typing'; //typing by default
        	//If Enter clicked or Chat btn clicked
        	//If message is empty, it should be a typing event so we're not broadcasting blank text
        	if (message!='' && (keycode == 13 || event.type === 'click')){ 
        		chatType = 'chat';
                document.getElementById('chat').value = '';
        	}
        	
        	//Properly parse & out of text otherwise XML Parser WILL CRASH
        	//Parsing some invalid Unicode from text string to prevent crashes
        	message = message.replace(/&/gm, '&amp;');
        	message = message.replace(/</gm, '&lt;');
        	 	
        	
        	var xml = '<message type="'+chatType+'" senderID="'+clientID+'">'+       
                '<chat>'+
                '<text>'+message+'</text>'+
                '</chat>'+
                '</message>';
            Chat.socket.send(xml);
        };
        
      

        var Console = {};

		//Log is for system messages; get printed verbatim in black
        Console.log = (function(message) {
            var console = document.getElementById('console');
            var p = document.createElement('p');
            p.style.wordWrap = 'break-word';
            p.innerHTML = message;
            if (chatAlertPast) p.style.backgroundColor = CHAT_HISTORY_DBGC;
            console.appendChild(p);
            //For sake of chat history refreshes, think we should keep this, also it does work in regular chat
            
            console.scrollTop = console.scrollHeight;
        });
        
        
        Chat.initialize = util_webSocketConnect;
        Chat.initialize();

		//No idea how you'd get this far without JS lol
        document.addEventListener("DOMContentLoaded", function() {
            // Remove elements with "noscript" class - <noscript> is not allowed in XHTML
            var noscripts = document.getElementsByClassName("noscript");
            for (var i = 0; i < noscripts.length; i++) {
                noscripts[i].parentNode.removeChild(noscripts[i]);
            }
        }, false);    
        
        function buttonSend(event){
            //send message from text field when button is clicked
            Chat.sendMessage(event);
        }
    
        function showUsers(messageNode) {
        	var userSideBar = document.getElementById('userContainer');
        	//clear the whole thing
        	while(userSideBar.firstChild) {
        		userSideBar.removeChild(userSideBar.firstChild);
        	}
        	var users = messageNode.getElementsByTagName('member');
        	
        	for (var i=0; i<users.length; i++) {
        		var userP = document.createElement('p');
        		var userColor = users[i].getAttribute('senderColor');
        		var username = users[i].textContent;
        	
        		userP.style.color = 'Snow';
        		userP.style.backgroundColor = userColor;
        		//userP.style.backgroundColor = 'Snow';
        		userP.style.borderColor = userColor;
        		userP.style.textAlign = 'center';
        		userP.className = "username"; //class name but not class??
        		userP.innerHTML = "# "+username+" ";
        		
        		userSideBar.appendChild(userP);
        	}
        	
        	
            //Set Group Name
            var groupNum = messageNode.getAttribute("groupNumber");
            document.getElementById('groupName').innerHTML = "Group "+groupNum;
        }
                       
                
    ]]>
    
    
    
    </script>
</head>
<body>
<h1 id='groupName'></h1>
<div class="noscript"><h2 style="color: #ff0000">Seems your browser doesn't support Javascript! Websockets rely on Javascript being enabled. Please enable
    Javascript and reload this page!</h2></div>
<div>    
	<div id="userContainer" style="float:right; font-weight:bold">
    	<!--  <p class="username" style="background-color:red;">  UserName1 </p> -->
    	<!-- <p class="username" style="background-color:red; border-color:red">  UserName1 </p> -->
    </div>
    <div id="console-container">
        <div id="console"/>
    </div>
    

    <p>
        <input id="chat" type="text" placeholder="type and press enter to chat" />
        <button id='chat_button' onclick='buttonSend(event)'>Chat</button>
    </p>
</div>


</body>
</html>