<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
<head>
    <title>Chat (ALPHA)</title>
    <style type="text/css"><![CDATA[
        input#chat {
            width: 410px
        }

        #console-container {
            width: 500px;
        }

        #console {
            border: 1px solid #CCCCCC;
            border-right-color: #999999;
            border-bottom-color: #999999;
            height: 300px;
            overflow-y: scroll;
            padding: 5px;
            width: 100%;
        }

        #console p {
            padding: 0;
            margin: 0;
        }
        
        # h1 {
        	font-family: "serif";
        	font-weight: bold;
        }
        
         div p.username {
        	font-weight: bold;
        	color: black;
        	//background-color:red; 
        	border-style: outset;
        }
    ]]></style>
    
    <script src="utility.js" type="text/javascript"></script>
    <script type="application/javascript"><![CDATA[
        "use strict";

        console.log("Not this kind of Console.log");
        var Chat = {};
        util_permIDCheck();
        
        var clientID = window.name;	
        
        Chat.socket = null;
        
        var host = '';
        var TYPING_BGC = 'WhiteSmoke';
        var USER_BGC = 'LightGoldenRodYellow';
        var CHAT_HISTORY_BGC = 'Beige';

        Chat.connect = (function(host) {
            if ('WebSocket' in window) {
                Chat.socket = new WebSocket(host);                
            } else if ('MozWebSocket' in window) {
                Chat.socket = new MozWebSocket(host);                
            } else {
                Console.log('Error: WebSocket is not supported by this browser.');
                return;
            }

            Chat.socket.onopen = function () {
                Console.log('Info: WebSocket connection opened.');                
                //create onkeyup listener
                document.getElementById('chat').onkeyup = function(event) {
                    //send every keypress to server for broadcast to all users
                    Chat.sendMessage(event);
                };
                
                //broadcast to group that user has joined
                var xml = '<message type="joinChat" senderID="'+clientID+'" ></message>';
                Chat.socket.send(xml);
            };

            Chat.socket.onclose = function () {
                document.getElementById('chat').onkeydown = null;
                Console.log('Info: WebSocket closed... host: '+host);
                sessionStorage.clear(); //? Did we use sessionStorage?
            };

			Chat.socket.onmessage = function (message) {
				//message arrives in xml, parse data into xml format and get attributes
				//sort by message type
				//Typing- user still typing, save reference
				//Chat - user finished typing
				//Alert - Info from server
				
				var xml = message.data;
                var parser = new DOMParser();
                var xmlDoc = parser.parseFromString(xml,"text/xml");
                var messageNode = xmlDoc.getElementsByTagName('message')[0];
                var messageType = messageNode.getAttribute('type');
                
                //Capture non chat related messages here
                if (messageType == 'redirect'){
                	alert("It seems you refreshed the chat page. \n"
                		+ "Unfortunately, the server doesn't like that and you'll have \n"
                		+ "to login again. Sorry.");
                	util_redirect(messageNode);
                	return;
                } else if (messageType == 'noPermID'){
                	util_noPermID();
                	return;
                } else if (messageType == 'checkGroups'){
                	//ignore but capture this
                	return;
                } else if (messageType == 'lGroupMembers'){
                	showUsers(messageNode);
                	return;
                }
                
                //if message is empty then clear the user's input from screen.
                //this makes sure that if 'backspace' causes all characters to be removed then the username will vanish
                //Note: Users 'typing' messages are not processed
                
                var textNode; //this thing is the cause of so many issues
                var innerText = '';
                if (xmlDoc.getElementsByTagName('text')!==undefined) {
                	textNode = xmlDoc.getElementsByTagName('text')[0];
                	if (textNode.childNodes[0]!==undefined) {
                		innerText = textNode.childNodes[0].nodeValue;
                	}
                }      
       			
                var senderColor = messageNode.getAttribute('senderColor');
                var senderID = messageNode.getAttribute('senderID');
                var userLabel = messageNode.getAttribute('sendername')+": ";
                userLabel = "<b>"+userLabel+"</b>";
                
                //Parse a simplified date from the server timestamp on broadcastGroup
                var serverTS = new Date();
                serverTS.setTime(messageNode.getAttribute('timestamp'));
                var timestamp = serverTS.getHours()+":"+serverTS.getMinutes()+":"+serverTS.getSeconds()+"."+serverTS.getMilliseconds();
                timestamp = '<div style="float: right; display: inline-block">'+timestamp+'</div>';
                //var timestamp = messageNode.getAttribute('timestamp');
                
                var console = document.getElementById('console'); //get console
                var newline = document.createElement('br'); //get break tag
                var paragraph = document.getElementById(senderID);
                
                var chatText = userLabel + innerText + timestamp;
                //var chatText = userLabel + innerText;
                
                 
                 if (messageType == 'typing'){ //Sender is still typing
                 	if (clientID != senderID){
                 		//Do nothing if client recieved its own info since its already in the chatbox
                 		if (paragraph==null) {
                 			//need to create <p> element to display text in console
                 			paragraph = document.createElement('p'); //get paragraph tag
                 			
                 			paragraph.style.wordWrap = 'break-word';
                 			paragraph.innerHTML = chatText;
                 			paragraph.id = senderID; //label paragraph after the userID
                 			paragraph.style.color = senderColor;
                 			paragraph.style.backgroundColor = TYPING_BGC;
                 			console.appendChild(paragraph); //add to console
                 		} else if (textNode != undefined && textNode.childNodes[0] === undefined){ //No text in 'typing' message
                 			paragraph.innerHTML = '';
                 			//paragraph.id = ''; //dont see reason to lose id reference
                 		} else {
                 			// <p> element already exists to add to that value
                 			paragraph.innerHTML = chatText;
                 		}
                 	} //close !ID
                 } else if (messageType == 'chat') {
                 	//Complete message has been logged - applies to all group members
                 	//no exceptions like on typing
                 	if (paragraph == null) {
                 		//means that the user is the broadcaster, so new <p> for chat
                 		paragraph = document.createElement('p');
                 		paragraph.style.wordWrap = 'break-word';
                 		paragraph.style.color = senderColor;
                 		paragraph.style.backgroundColor = USER_BGC;
                 		paragraph.innerHTML = chatText;
                 		
                 		//If chat history object, change BG
                 		if (messageNode.getAttribute("chatHistory")!=undefined) {
                 			paragraph.style.backgroundColor = CHAT_HISTORY_BGC;
                 		}
                 		
                 		console.appendChild(paragraph);
                 		paragraph.appendChild(newline);
                 	} else {
                 		//senderID != clientID so <p> element already exists
                 		paragraph.innerHTML = chatText;
                 		paragraph.id = ''; //remove reference by senderID
                 		paragraph.style.backgroundColor = 'White';
                 		paragraph.appendChild(newline);
                 	}
                 } else if (messageType == 'alert') {
                 	//server message from no user in particular; using console.log
                 	Console.log(innerText+timestamp);
                 } else {
                 	alert('invalid message from server: \n'+xml);
                 }
                 
                 //Scroll to bottom on console
                 console.scrollTop = console.scrollHeight;
                 
                 //Set Group Name
                 var groupNum = messageNode.getAttribute("groupNumber");
                 document.getElementById('groupName').innerHTML = "Group "+groupNum;
             };
                 			
			
            /*Chat.socket.onmessage = function (message) {
                //message.data here will be in xml format
                //parse the message.data text to find out if client is still typing message
                //or if the user has completed a full message.
                //alert('chat onmessage');
                var xml = message.data;
                var parser = new DOMParser();
                var xmlDoc = parser.parseFromString(xml,"text/xml");
                var messageNode = xmlDoc.getElementsByTagName('message')[0];
                var messageType = messageNode.getAttribute('type');
                //alert('messageType: '+messageType);                
                var textNode = xmlDoc.getElementsByTagName('text')[0];
                //alert('textNode.childNodes[0]: '+textNode.childNodes[0]);
                
               	if (messageType == 'redirect'){
                	util_redirect(messageNode);
                } else if (messageType == 'noPermID'){
                	util_noPermID();
                } else if (messageType == 'checkGroups'){
                	//ignore but capture this
                	return;
                }
                
                //if message is empty then clear the user's input from screen.
                //this makes sure that if 'backspace' causes all characters to be removed then the username will vanish
                if (textNode.childNodes[0] === undefined){
                  //alert('text element is empty');
                  var senderID = messageNode.getAttribute('senderID');
                  var paragraph = document.getElementById(senderID);
                  var userLabel = messageNode.getAttribute('sendername')+": ";
                  //paragraph.innerHTML = userLabel;
                  //erase all text (including userLabel) from element and clear the id.
                  paragraph.innerHTML = '';
                  paragraph.id = '';
                  return;
                }
                var innerText = textNode.childNodes[0].nodeValue;                
                var senderColor = messageNode.getAttribute('senderColor');
                
                //alert('after innerText');
                //if message is still being typed
                //display in console on the same line as the user's other text                
                //if message is complete then display as full entry in console.                 
                
                if (messageType == 'typing'){
                    //alert('typing activity from color: '+senderColor);
                    //output text to console if it originated from another client                    
                    var senderID = messageNode.getAttribute('senderID'); //assigned by client
                    //var clientID = messageNode.getAttribute('clientID'); //assigned by server
                    
                    if (clientID == '' || clientID == null) alert('null clientID');                    
                    if (clientID != senderID){
                      //was this user the one that sent text message that was just received back?
                      //if so, do nothing otherwise display in console.                      
                      //var guestLabel = 'Guest '+senderID+': ';
                      var userLabel = messageNode.getAttribute('sendername')+": ";
                      //check if tag already exists with id==senderID
                      //if so, then send guestLabel and innerText to that element's innerHTML
                      //otherwise, create a <p> element below all the other elements in console
                      //before populating <p> with text.
                      var consoleElement = document.getElementById(senderID);                      
                      if (consoleElement == null){
                        //need to create element to display text in console.
                        var console = document.getElementById('console');
                        var newline = document.createElement('BR');
                        var paragraph = document.createElement('P'); //create paragraph element
                        paragraph.style.wordWrap = 'break-word';
                        paragraph.style.color = senderColor;
                        //alert('set paragraph.style.color: '+senderColor);
                        paragraph.innerHTML = userLabel+innerText;
                        paragraph.id = senderID;                        
                        console.appendChild(paragraph);                         
                        
                      } else {
                      
                          //<p> element already exists so just add new character.
                          consoleElement.innerHTML = userLabel+innerText; //add text to paragraph element
                      }                      
                      
                    }
                    
                } else if (messageType == 'chat'){
                    //message type is 'chat' meaning a complete message has been logged.
                    
                    //place the chat text in appropriate <p> element followed by newline.                    
                    var senderID = messageNode.getAttribute('senderID');
                    var consoleElement = document.getElementById(senderID);
                    //var guestLabel = 'Guest '+senderID+': ';
                    var userLabel = messageNode.getAttribute('sendername')+": ";
                    var console = document.getElementById('console');
                    var newline = document.createElement('br');
                    if (consoleElement == null) {
                      //null consoleElement means that the senderID and clientID are equal.
                      //in this case create a <p> to display chat output.                      
                      var paragraph = document.createElement('P'); //create paragraph element
                      paragraph.style.wordWrap = 'break-word';
                      paragraph.style.color = senderColor;
                      paragraph.innerHTML = userLabel+innerText;                                            
                      console.appendChild(paragraph);  
                      paragraph.appendChild(newline);
                    } else {
                        //senderID != clientID so there is already text in <p> element                       
                        consoleElement.innerHTML = '';
                        consoleElement.innerHTML = userLabel+innerText;
                        consoleElement.id = ''; //clear the id                        
                        consoleElement.appendChild(newline);
                    }
                    
                    
                    //Console.log(guestLabel+innerText);
                } else if (messageType == 'alert'){
                    //also update the clientID for the sender to reflect new identity on server
                    //upon entering chat page the client receives a new ID from server
                    //alert('alert message received');
                    
                    var senderID = messageNode.getAttribute('senderID');
                    
                    //alert('clientID: '+clientID+' senderID: '+senderID);
                    //alert('senderColor: '+senderColor);
                    
                    if (clientID == senderID){
                        //if sender and client are same then log the updated clientID from server
                        //alert('sender is me');
                        clientID = messageNode.getAttribute('updatedID');                        
                        //set senderColor for this client
                        //each client will submit their color back to server on every subsequent message.                        
                        if(typeof(Storage) != "undefined") {
                            // Code for localStorage/sessionStorage.
                            sessionStorage.setItem("clientColor", senderColor);
                            //alert('set senderColor: '+senderColor);
                        } else {
                            alert('no web storage support');
                            // Sorry! No Web Storage support..
                        }
                    }
                    //notify group that a user has joined session.
                    //alert('user joined/alert message received.');
                    Console.log(innerText);
                    
                    
                } else if (messageType == 'clientIdentification'){
                  alert('client identification');
                }
                
            };*/
        }); //end of Socket.connect
		
        
        Chat.sendMessage = function (event) {
        	var keycode = event.keyCode;
        	var message = document.getElementById('chat').value;
        	var chatType = 'typing'; //typing by default
        	//If Enter clicked or Chat btn clicked
        	//If message is empty, it should be a typing event so we're not broadcasting blank text
        	if (message!='' && (keycode == 13 || event.type === 'click')){ 
        		chatType = 'chat';
                document.getElementById('chat').value = '';
        	}
        	var xml = '<message type="'+chatType+'" senderID="'+clientID+'">'+       
                '<chat>'+
                '<text>'+message+'</text>'+
                '</chat>'+
                '</message>';
            Chat.socket.send(xml);
        };
        
      

        var Console = {};

		//Log is for system messages; get printed verbatim in black
        Console.log = (function(message) {
            var console = document.getElementById('console');
            var p = document.createElement('p');
            p.style.wordWrap = 'break-word';
            p.innerHTML = message;
            console.appendChild(p);
            //For sake of chat history refreshes, think we should keep this, also it does work in regular chat
            /*while (console.childNodes.length > 25) {
                console.removeChild(console.firstChild); //?? Do we need to remove old messages?
            }*/
            console.scrollTop = console.scrollHeight;
        });
        
        
        Chat.initialize = util_webSocketConnect;
        Chat.initialize();

		//No idea how you'd get this far without JS lol
        document.addEventListener("DOMContentLoaded", function() {
            // Remove elements with "noscript" class - <noscript> is not allowed in XHTML
            var noscripts = document.getElementsByClassName("noscript");
            for (var i = 0; i < noscripts.length; i++) {
                noscripts[i].parentNode.removeChild(noscripts[i]);
            }
        }, false);    
        
        function buttonSend(event){
            //send message from text field when button is clicked
            Chat.sendMessage(event);
        }
    
        function showUsers(messageNode) {
        	var userSideBar = document.getElementById('userContainer');
        	//clear the whole thing
        	while(userSideBar.firstChild) {
        		userSideBar.removeChild(userSideBar.firstChild);
        	}
        	var users = messageNode.getElementsByTagName('member');
        	
        	for (var i=0; i<users.length; i++) {
        		var userP = document.createElement('p');
        		var userColor = users[i].getAttribute('senderColor');
        		var username = users[i].innerHTML;
        	
        		
        		userP.style.backgroundColor = userColor;
        		userP.style.borderColor = userColor;
        		userP.className = "username"; //class name but not class??
        		userP.innerHTML = username;
        		
        		userSideBar.appendChild(userP);
        	}
        }
                       
                
    ]]>
    
    
    
    </script>
</head>
<body>
<h1 id='groupName'></h1>
<div class="noscript"><h2 style="color: #ff0000">Seems your browser doesn't support Javascript! Websockets rely on Javascript being enabled. Please enable
    Javascript and reload this page!</h2></div>
<div>    
	<div id="userContainer" style="float:right; font-weight:bold">
    	<!--  <p class="username" style="background-color:red;">  UserName1 </p> -->
    	<!-- <p class="username" style="background-color:red; border-color:red">  UserName1 </p> -->
    </div>
    <div id="console-container">
        <div id="console"/>
    </div>
    

    <p>
        <input id="chat" type="text" placeholder="type and press enter to chat" />
        <button id='chat_button' onclick='buttonSend(event)'>Chat</button>
    </p>
</div>


</body>
</html>